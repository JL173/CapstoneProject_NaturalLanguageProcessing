# coursera quiz predictions
test_strings <- c("The guy in front of me just bought a pound of bacon, a bouquet, and a case of", "You're the reason why I smile everyday. Can you follow me please? It would mean the", "Hey sunshine, can you follow me and make me the", "Very early observations on the Bills game: Offense still struggling but the","Go on a romantic date at the", "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my", "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some", "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little", "Be grateful for the good times and keep the faith during the", "If this isn't the cutest thing you've ever seen, then you must be")
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
data("stop_words")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/05/",    # % sample each doc
size = -1L,
coverage = 0.90,
stem = TRUE)
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/5/",    # % sample each doc
size = -1L,
coverage = 0.90,
stem = TRUE)
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/1/",    # % sample each doc
size = -1L,
coverage = 0.90,
stem = TRUE)
#filter = stop_words)
View(model)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
test_str[1]
test_strings[1]
MatchStringPredict2(test_string[1], model = model)
MatchStringPredict2(test_strings[1], model = model)
MatchStringPredict2(test_strings[2], model = model)
MatchStringPredict2(test_strings[2], model = model)
MatchStringPredict2(test_strings[2], model = model)
MatchStringPredict2(test_strings[1], model = model)
str <- StringTailngram(test_strings[1], ngram = 3)
str
length(str)
ptable <- model %>% filter(word1 == str[1], word2 == str[2], word3 == str[3]) %>% head(5)
ptable
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
ptable <- model %>% filter(word1 == str[1], word2 == str[2], word3 == str[3], !is.null(word4)) %>% head(5)
ptable
ptable <- model %>% filter(word1 == str[1], word2 == str[2], word3 == str[3]) %>% filter(!is.null(word4)) %>% head(5)
ptable
ptable <- model %>% filter(word1 == str[1], word2 == str[2], word3 == str[3]) %>% filter(is.null(word4)) %>% head(5)
ptable
ptable <- model %>% filter(word1 == str[1], word2 == str[2], word3 == str[3], !(is.null(word4))) %>% head(5)
ptable
ptable <- model %>% filter(word1 == str[1], word2 == str[2], word3 == str[3], !(is.null(word4)) == TRUE) %>% head(5)
ptable
ptable <- model %>% filter(word1 == str[1], word2 == str[2], word3 == str[3], !(is.null(word4) == TRUE)) %>% head(5)
ptable
ptable <- model %>% filter(word1 == str[1], word2 == str[2], word3 == str[3]) %>% drop_na() %>% head(5)
ptable
nrow(ptable)
unimodel <- model %>% filter(is.null(word2)) %>% filter(is.null(word3)) %>% filter(is.null(word4)) %>% select(c("P", "word1"))
View(unimodel)
unimodel <- model %>% filter(is.null(word4)) %>% filter(is.null(word3)) %>% filter(is.null(word2)) %>% select(c("P", "word1"))
unimodel <- model %>% filter(is.null(word2)) %>% select(c("P", "word1"))
unimodel <- model %>% filter(is.null(word2))
unimodel <- model %>% filter(is.null(word2) == TRUE)
unimodel <- model %>% filter(is.na(word2) == TRUE)
unimodel <- model %>% filter(is.na(word2)) %>% filter(is.na(word3)) %>% filter(is.na(word4)) %>% select(c("P", "word1")
)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
RandomUnigram(unimodel, k = 3)
MatchStringPredict2(test_strings[1], model = model)
MatchStringPredict2(test_strings[1], model = model)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
MatchStringPredict2(test_strings[1], model = model)
MatchStringPredict(test_strings[1], model = model)
MatchStringPredict(test_strings[1], model)
MatchStringPredict2(test_strings[1], model = model)
MatchStringPredict2(test_strings[2], model = model)
MatchStringPredict(test_strings[2], model)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
MatchStringPredict(test_strings[2], model = model, stem = TRUE)
MatchStringPredict(test_strings[1], model = model, stem = TRUE)
MatchStringPredict(test_strings[1], model = model, stem = TRUE, filter = stop_words)
MatchStringPredict(test_strings[1], model = model, stem = TRUE, filter = stop_words)
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE,
filter = stop_words)
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE,
filter = stop_words)
for (index in 1:10)
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE,
filter = stop_words)
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE,
filter = stop_words))
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE)
#filter = stop_words))
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE))
#filter = stop_words))
}
# stepped chunk to combine entire document and model
# equivalent to CallAll("data/en/_US/", size = -1L, coverage = 0.9, stem = TRUE, filter = stop_words)
base <- LoadFiles("data/en_US/", stem = TRUE)
chunks <- UnlistDF(base, size = 5e6)
View(chunks)
tidy_1_ <- lapply(chunks, CleanTokens,
n = 1,
filter_df = stop_words) %>% MergeDTM()
save(tidy_1_, file = "tidy_1_stem_filter.RDa")
tidy_2_ <- lapply(chunks, CleanTokens,
n = 2,
filter_df = stop_words) %>% MergeDTM()
save(tidy_2_, file = "tidy_2_stem_filter.RDa")
tidy_3_ <- lapply(chunks, CleanTokens,
n = 3,
filter_df = stop_words) %>% MergeDTM()
save(tidy_3_, file = "tidy_3_stem_filter.RDa")
tidy_4_ <- lapply(chunks, CleanTokens,
n = 4,
filter_df = stop_words) %>% MergeDTM()
save(tidy_4_, file = "tidy_4_stem_filter.RDa")
unigram_ <- WordFreqProb(tidy_1_)
bigram_ <- WordFreqProb(tidy_2_)
trigram_ <- WordFreqProb(tidy_3_)
quagram_ <- WordFreqProb(tidy_4_)
vocab_n_ <- unigram_ %>%
mutate(cumsum = cumsum(P)) %>%
summarise(vocab = sum(cumsum <= 0.9))%>%
as.integer()
unigram_ <- unigram_ %>% slice_head(n = vocab_n_)
model <- CreateProbTable(unigram_,
bigram_,
trigram_,
quagram_)
save(model, file = "model_stem_filter.RDa")
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE,
filter = stop_words))
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE,
filter = stop_words))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
stem = TRUE,
filter = stop_words))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model = model,
n = 10,
stem = TRUE,
filter = stop_words))
}
unigram_ <- WordFreqProb(tidy_1_, k = 1)
bigram_ <- WordFreqProb(tidy_2_, k = 3)
trigram_ <- WordFreqProb(tidy_3_, k = 2)
quagram_ <- WordFreqProb(tidy_4_, k = 1)
vocab_n_ <- unigram_ %>%
mutate(cumsum = cumsum(P)) %>%
summarise(vocab = sum(cumsum <= 0.9))%>%
as.integer()
unigram_ <- unigram_ %>% slice_head(n = vocab_n_)
model <- CreateProbTable(unigram_,
bigram_,
trigram_,
quagram_)
save(model, file = "model_stem_filter.RDa")
unigram_ <- WordFreqProb(tidy_1_)
bigram_ <- WordFreqProb(tidy_2_)
trigram_ <- WordFreqProb(tidy_3_)
quagram_ <- WordFreqProb(tidy_4_)
vocab_n_ <- unigram_ %>%
mutate(cumsum = cumsum(P)) %>%
summarise(vocab = sum(cumsum <= 0.9))%>%
as.integer()
unigram_ <- unigram_ %>% slice_head(n = vocab_n_)
model <- CreateProbTable(unigram_,
bigram_cut,
trigram_cut,
quagram_cut)
# efficiency storage by saving only top results for each
# ??check: bias towards start of alphabet??
bigram_cut <- TopNProbFreq(bigram_, k = 3)
trigram_cut <- TopNProbFreq(trigram_, k = 2)
quagram_cut <- TopNProbFreq(quagram_, k = 1)
vocab_n_ <- unigram_ %>%
mutate(cumsum = cumsum(P)) %>%
summarise(vocab = sum(cumsum <= 0.9))%>%
as.integer()
unigram_ <- unigram_ %>% slice_head(n = vocab_n_)
model <- CreateProbTable(unigram_,
bigram_cut,
trigram_cut,
quagram_cut)
vocab_n_ <- unigram_ %>%
mutate(cumsum = cumsum(P)) %>%
summarise(vocab = sum(cumsum <= 0.9))%>%
as.integer()
unigram_ <- unigram_ %>% slice_head(n = vocab_n_)
model <- CreateProbTable(unigram_,
bigram_cut,
trigram_cut,
quagram_cut)
save(model, file = "model_stem_filter_cut.RDa")
for (index in 1:10){
print(test_strings[index])
print("\n")
print(MatchStringPredict(test_strings[index],
model = model,
n = 10,
stem = TRUE,
filter = stop_words))
}
for (index in 1:10){
print(test_strings[index])
print("")
print(StringTailngram(test_strings[index], stem = TRUE, filter = stop_words))
print("")
print(MatchStringPredict(test_strings[index],
model = model,
n = 10,
stem = TRUE,
filter = stop_words))
}
for (index in 1:10){
print(test_strings[index])
print("")
print(StringTailngram(test_strings[index], stem = TRUE, filter = stop_words))
print("")
print(MatchStringPredict(test_strings[index],
model = model,
n = 10,
stem = TRUE,
filter = stop_words))
print("")
}
model %>% filter(word1 == "hey", word2 == "sunshine", word3 == "follow") %>% drop_na()
model %>% filter(word2 == "follow", word3 == "sunshine") %>% drop_na()
model %>% filter(word1 == "sunshine", word2 == "follow") %>% drop_na()
model %>% filter(word1 == "follow") %>% drop_na()
model %>% filter(word2 == "sunshine", word1 == "hey") %>% drop_na()
model %>% filter(word2 == "sunshine", word1 == "hey", word = NA) %>% drop_na()
model %>% filter(word2 == "sunshine", word1 == "hey", word = NA)
model %>% filter(word2 == "sunshine", word1 == "hey", word3 = NA)
model %>% filter(word2 == "sunshine", word1 == "hey", is.na(word3))
model %>% filter(word2 == "sunshine", word1 == "hey", is.na(word4))
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (index in 1:10){
print(test_strings[index])
print("")
print(StringTailngram(test_strings[index], stem = TRUE, filter = stop_words))
print("")
print(MatchStringPredict(test_strings[index],
model = model,
n = 10,
stem = TRUE,
filter = stop_words))
print("")
}
tidy_1_ <- lapply(chunks, CleanTokens,
n = 1) %>% MergeDTM()
gc()
tidy_1_ <- lapply(chunks, CleanTokens,
n = 1) %>% MergeDTM()
# coursera quiz predictions
test_strings <- c("The guy in front of me just bought a pound of bacon, a bouquet, and a case of", "You're the reason why I smile everyday. Can you follow me please? It would mean the", "Hey sunshine, can you follow me and make me the", "Very early observations on the Bills game: Offense still struggling but the","Go on a romantic date at the", "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my", "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some", "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little", "Be grateful for the good times and keep the faith during the", "If this isn't the cutest thing you've ever seen, then you must be")
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
data("stop_words")
# stepped chunk to combine entire document and model
# equivalent to CallAll("data/en/_US/", size = -1L, coverage = 0.9, stem = TRUE, filter = stop_words)
base <- LoadFiles("data/en_US/", stem = TRUE)
chunks <- UnlistDF(base, size = 5e6) #5e6 = 50mb
tidy_1_ <- lapply(chunks, CleanTokens,
n = 1) %>% MergeDTM()
save(tidy_1_, file = "tidy_1_stem.RDa")
tidy_2_ <- lapply(chunks, CleanTokens,
n = 2) %>% MergeDTM()
save(tidy_2_, file = "tidy_2_stem.RDa")
tidy_3_ <- lapply(chunks, CleanTokens,
n = 3) %>% MergeDTM()
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
gc()
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
data("stop_words")
tidy_3_ <- lapply(chunks, CleanTokens,
n = 3) %>% MergeDTM()
gc()
tidy_3_ <- lapply(chunks, CleanTokens,
n = 3) %>% MergeDTM()
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
tidy_3_ <- lapply(chunks, CleanTokens,
n = 3) %>% MergeDTM()
save(tidy_3_, file = "tidy_3_stem.RDa")
gc()
tidy_4_ <- lapply(chunks, CleanTokens,
n = 4) %>% MergeDTM()
save(tidy_4_, file = "tidy_4_stem.RDa")
quagram_ <- WordFreqProb(tidy_4_)
