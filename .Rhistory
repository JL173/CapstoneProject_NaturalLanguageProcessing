# coursera quiz predictions
test_strings <- c("The guy in front of me just bought a pound of bacon, a bouquet, and a case of", "You're the reason why I smile everyday. Can you follow me please? It would mean the", "Hey sunshine, can you follow me and make me the", "Very early observations on the Bills game: Offense still struggling but the","Go on a romantic date at the", "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my", "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some", "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little", "Be grateful for the good times and keep the faith during the", "If this isn't the cutest thing you've ever seen, then you must be")
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
data("stop_words")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = -1L,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = 5e5,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
gc()
base_1000 <- LoadFiles("data/en_US/", n = 1000)
base_1000
?sample
sample(base_1000[1], size = 750)
sample(base_1000[1], n = 1000, size = 750)
sample(base_1000[1], size = 750)
sample(base_1000[[1]], size = 750)
base_1000[[1]]
sample(base_1000[[1]], size = 750)
sample_1 <- base_1000[[1]][sample(1:nrow(base_1000[[1]]), 5),]
sample_1
sample_1 <- base_1000[[1]][sample(1:nrow(base_1000[[1]]), 750),]
sample_1
fwrite(sample_1, "data/en_us/text.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(sample_1$text, "data/en_us/text.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(sample_1$text), "data/en_us/text.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
gc()
base_files <- LoadFiles("data/en_US/")
View(base_files)
blog_10_sample <- base_files[[1]] %>% sample_frac(.1)
blog_20_sample <- base_files[[1]] %>% sample_frac(.2)
blog_50_sample <- base_files[[1]] %>% sample_frac(.5)
blog_75_sample <- base_files[[1]] %>% sample_frac(.75)
blog_25_sample <- base_files[[1]] %>% sample_frac(.25)
news_10_sample <- base_files[[2]] %>% sample_frac(.1)
news_25_sample <- base_files[[2]] %>% sample_frac(.25)
news_50_sample <- base_files[[2]] %>% sample_frac(.5)
news_75_sample <- base_files[[2]] %>% sample_frac(.75)
twitter_10_sample <- base_files[[3]] %>% sample_frac(.1)
twitter_25_sample <- base_files[[3]] %>% sample_frac(.25)
twitter_50_sample <- base_files[[3]] %>% sample_frac(.5)
twitter_75_sample <- base_files[[3]] %>% sample_frac(.75)
fwrite(list(blog_10_sample$text), "data/en_us/10/en_US.blogs.10.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(blog_25_sample$text), "data/en_us/25/en_US.blogs.25.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(blog_50_sample$text), "data/en_us/50/en_US.blogs.50.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(blog_75_sample$text), "data/en_us/75/en_US.blogs.75.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_10_sample$text), "data/en_us/10/en_US.news.10.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_25_sample$text), "data/en_us/25/en_US.news.25.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_50_sample$text), "data/en_us/50/en_US.news.50.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_75_sample$text), "data/en_us/75/en_US.news.75.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_10_sample$text), "data/en_us/10/en_US.twitter.10.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_25_sample$text), "data/en_us/25/en_US.twitter.25.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_50_sample$text), "data/en_us/50/en_US.twitter.50.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_75_sample$text), "data/en_us/75/en_US.twitter.75.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/10/",
coverage = 0.90,
filter = stop_words)
# coursera quiz predictions
test_strings <- c("The guy in front of me just bought a pound of bacon, a bouquet, and a case of", "You're the reason why I smile everyday. Can you follow me please? It would mean the", "Hey sunshine, can you follow me and make me the", "Very early observations on the Bills game: Offense still struggling but the","Go on a romantic date at the", "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my", "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some", "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little", "Be grateful for the good times and keep the faith during the", "If this isn't the cutest thing you've ever seen, then you must be")
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
data("stop_words")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/10/",
coverage = 0.90,
filter = stop_words)
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/10/",
size = -1L,
coverage = 0.90,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
MatchStringPredict(test_strings[10],
model,
stem = TRUE,
filter = stop_words)
View(model)
testdt <- data.table(line = 1:2, text = c("Long'eth string with @ symobols!", "who've"))
testdt
testdt["text"] <- removePunctuation(testdt["text"])
testdt$text <- removePunctuation(testdt["text"])
testdt$text <- removePunctuation(testdt$text)
testdt
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
twitter_01_sample <- base_files[[3]] %>% sample_frac(.01)
base_files <- LoadFiles("data/en_US/")
twitter_01_sample <- base_files[[3]] %>% sample_frac(.01)
twitter_05_sample <- base_files[[3]] %>% sample_frac(.05)
news_01_sample <- base_files[[2]] %>% sample_frac(.01)
news_05_sample <- base_files[[2]] %>% sample_frac(.05)
blog_01_sample <- base_files[[1]] %>% sample_frac(.01)
blog_05_sample <- base_files[[1]] %>% sample_frac(.05)
fwrite(list(twitter_01_sample$text), "data/en_us/1/en_US.twitter.1.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(twitter_05_sample$text), "data/en_us/5/en_US.twitter.5.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_01_sample$text), "data/en_us/1/en_US.news.1.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(news_05_sample$text), "data/en_us/5/en_US.news.5.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(blog_01_sample$text), "data/en_us/1/en_US.blogs.1.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
fwrite(list(blog_05_sample$text), "data/en_us/5/en_US.blogs.5.txt", sep = "\n", col.names = FALSE, row.names = FALSE)
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/1/",    #10% sample each doc
size = -1L,
coverage = 0.90,
stem = FALSE
filter = stop_words)
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/1/",    #10% sample each doc
size = -1L,
coverage = 0.90,
stem = FALSE,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = FALSE,
filter = stop_words))
}
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = FALSE,
filter = stop_words))
}
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = FALSE,
filter = stop_words))
}
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = FALSE,
filter = stop_words))
}
test_strings[10]
MatchStringPredict(test_strings[10], model)
MatchStringPredict(test_strings[1], model)
MatchStringPredict(test_strings[2], model)
MatchStringPredict(test_strings[9], model)
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model,
stem = FALSE,
filter = stop_words))
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model,
stem = FALSE,
filter = stop_words))
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model,
stem = FALSE,
filter = stop_words))
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model,
stem = FALSE,
filter = stop_words))
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model,
stem = FALSE,
filter = stop_words))
}
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model,
stem = FALSE,
filter = stop_words))
}
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/50/",    # % sample each doc
size = -1L,
coverage = 0.90,
stem = TRUE)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (index in 1:10){
print(MatchStringPredict(test_strings[index],
model,
stem = FALSE)
#filter = stop_words))
}
