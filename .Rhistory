setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
test_strings <- c("The guy in front of me just bought a pound of bacon, a bouquet, and a case of", "You're the reason why I smile everyday. Can you follow me please? It would mean the", "Hey sunshine, can you follow me and make me the", "Very early observations on the Bills game: Offense still struggling but the","Go on a romantic date at the", "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my", "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some", "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little", "Be grateful for the good times and keep the faith during the", "If this isn't the cutest thing you've ever seen, then you must be")
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
model_1000_050 <- CallAll("data/en_US/train/",
size = 1000,
sample = TRUE,
seed = 17373,
coverage = 0.5)
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
# record the current time before each chunk
now <<- Sys.time()
} else {
# calculate the time difference after a chunk
res <- difftime(Sys.time(), now)
# return a character string to show the time
paste("Time for this code chunk to run:", res)
}
}
}))
model_1000_050 <- CallAll("data/en_US/train/",
size = 1000,
sample = TRUE,
seed = 17373,
coverage = 0.5)
for (string in test_strings){
print(MatchStringPredict(string, model_1000_050))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (string in test_strings){
print(MatchStringPredict(string, model_1000_050))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
model_1000_075 <- CallAll("data/en_US/train/",
size = 1000,
sample = TRUE,
seed = 17373,
coverage = 0.75,
progress = TRUE)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
model_1000_075 <- CallAll("data/en_US/train/",
size = 1000,
sample = TRUE,
seed = 17373,
coverage = 0.75)
for (string in test_strings){
print(MatchStringPredict(string, model_1000_050))
}
model_1000_090 <- CallAll("data/en_US/train/",
size = 1000,
sample = TRUE,
seed = 17373,
coverage = 0.90)
for (string in test_strings){
print(MatchStringPredict(string, model_1000_050))
}
for (string in test_strings){
print(MatchStringPredict(string, model_1000_090))
}
for (string in test_strings){
print(MatchStringPredict(string, model_1000_075))
}
model_1000_050_f <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.50)
for (string in test_strings){
print(MatchStringPredict(string, model_1000_050_f))
}
model_1000_075_f <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.75)
for (string in test_strings){
print(MatchStringPredict(string, model_1000_075_f))
}
model_1000_090_f <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.90)
for (string in test_strings){
print(MatchStringPredict(string, model_1000_090_f))
}
model_10000_050_f <- CallAll("data/en_US/train/",
size = 10000,
sample = FALSE,
seed = 17373,
coverage = 0.50)
for (string in test_strings){
print(MatchStringPredict(string, model_10000_050_f))
}
model_10000_075_f <- CallAll("data/en_US/train/",
size = 10000,
sample = FALSE,
seed = 17373,
coverage = 0.75)
for (string in test_strings){
print(MatchStringPredict(string, model_10000_075_f))
}
model_10000_090_f <- CallAll("data/en_US/train/",
size = 10000,
sample = FALSE,
seed = 17373,
coverage = 0.90)
for (string in test_strings){
print(MatchStringPredict(string, model_10000_090_f))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
# this has 4-gram, can predict off three words
model_10000_090_f <- CallAll("data/en_US/train/",
size = 10000,
sample = FALSE,
seed = 17373,
coverage = 0.90)
for (string in test_strings){
print(MatchStringPredict(string, model_10000_090_f))
}
View(model_10000_090_f)
model_10000_090_f %>% filter(word1 == "a", word2 == "case") %>% head(10)
model_10000_090_f %>% filter(word1 == "a", word2 == "case", word3 == "of") %>% head(10)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
# this has 4-gram, can predict off three words
model_10000_090_f <- CallAll("data/en_US/train/",
size = 10000,
sample = FALSE,
seed = 17373,
coverage = 0.90)
for (string in test_strings){
print(MatchStringPredict(string, model_10000_090_f))
}
model_10000_090_f %>% filter(word1 == "would", word2 == "mean", word3 == "the") %>% head(10)
model_10000_090_f %>% filter(word1 == "struggling", word2 == "but", word3 == "the") %>% head(10)
model_10000_090_f %>% filter(word1 == "but", word2 == "the") %>% head(10)
model_10000_090_f %>% filter(word1 == "but", word2 == "the") %>% head(20)
model_10000_090_f %>% filter(word1 == "make", word2 == "me", word3 == "the") %>% head(10)
model_10000_090_f %>% filter(word1 == "me", word2 == "the") %>% head(20)
model_10000_090_f %>% filter(word1 == "me", word2 == "the") %>% head(10)
model_10000_090_f %>% filter(word1 == "date", word2 == "at", word3 == "the") %>% head(10)
model_10000_090_f %>% filter(word1 == "be", word2 == "on", word3 == "my") %>% head(10)
model_10000_090_f %>% filter(word1 == "with", word2 == "his", word3 == "little") %>% head(10)
model_10000_090_f %>% filter(word1 == "faith", word2 == "during", word3 == "the") %>% head(10)
model_10000_090_f %>% filter(word1 == "faith", word2 == "during", word3 == "the") %>% head(10)
model_10000_090_f %>% filter(word1 == "faith", word2 == "during", word3 == "the") %>% nrow()
test_strings[1]
StringTailngram(test_strings[1], 3)
filter_words <- fread("text_filter.txt")
View(filter_words)
filter_words <- fread("text_filter.txt", header= FALSE)
data("stop_words")
View(stop_words)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
# this has 4-gram, can predict off three words
model_10000_090_f <- CallAll("data/en_US/train/",
size = 100000,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string, model))
}
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
data("stop_words")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string, model))
}
test_strings <- c("The guy in front of me just bought a pound of bacon, a bouquet, and a case of", "You're the reason why I smile everyday. Can you follow me please? It would mean the", "Hey sunshine, can you follow me and make me the", "Very early observations on the Bills game: Offense still struggling but the","Go on a romantic date at the", "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my", "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some", "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little", "Be grateful for the good times and keep the faith during the", "If this isn't the cutest thing you've ever seen, then you must be")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string, model))
}
View(model)
stemDocument(test_Strings[1])
stemDocument(test_strings[1])
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string, model, stem = TRUE))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string, model, stem = TRUE))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (string in test_strings){
print(MatchStringPredict(string, model, stem = TRUE))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
c(2, 3)[3]
c(2, 3)[4]
c(2, 3)[2]
c(2, 3)[1]
list(c(3, 2))[2]
list(c(3, 2))[1]
list(3, 2)[1]
list(3, 2)[2]
list(3, 2)[3]
for (string in test_strings){
print(MatchStringPredict(string, model, stem = TRUE))
}
test_strings
View(model)
unimodel <- model %>% filter(is.na(word2), is.na(word3), is.na(word4)) %>% drop_na()
View(unimodel)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (string in test_strings){
print(MatchStringPredict(string, model, stem = TRUE))
}
unimodel <- model %>% filter(is.na(word2)) %>% filter(is.na(word3)) %>% filter(is.na(word4))
testsearch <- tail(StringTailngram(test_strings[1], ngram = 3, stem = TRUE), 3)
testsearch
stop_words
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
testsearch <- tail(StringTailngram(test_strings[1], ngram = 3, stem = TRUE, filter = stop_words), 3)
testsearch
test_strings[1]
strdf <- data.table(text = test_strings[1])
strdf
View(strdf)
unnest_tokens(strdf)
unnest_tokens(strdf, text)
strdf_token <- unnest_tokens(tbl = strdf, output = wod, input = text, token = "words", to_lower = TRUE)
strdf_token
strdf_token <- unnest_tokens(tbl = strdf, output = word, input = text, token = "words", to_lower = TRUE)
strdf_token
strdf_token <- strdf_token %>% anti_join(stop_words, by = "word")
strdf_token
strdf_token$word
paste(strdf_token$word)
paste(strdf_token$word, sep = " ")
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
StringTailngram(test_strings[1], ngram = 3, stem = TRUE, filter = NULL)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
StringTailngram(test_strings[1], ngram = 3, stem = TRUE, filter = NULL)
StringTailngram(test_strings[1], ngram = 3, stem = TRUE, filter = stop_words)
StringTailngram(test_strings[1], ngram = 3, stem = TRUE, filter = stop_words)[2]
StringTailngram(test_strings[1], ngram = 3, stem = TRUE, filter = stop_words)[3]
StringTailngram(test_strings[1], ngram = 3, stem = TRUE, filter = NULL)[2]
for (string in test_strings){
print(MatchStringPredict(string, model, stem = TRUE))
}
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
testsearch <- tail(StringTailngram(test_strings[1], ngram = 3, stem = TRUE, filter = stop_words), 3)
testsearch
teststr_len <- length(testsearch)
teststr_len
model %>% filter(word1 == "pound", word2 == "bacon", word3 == "bouquet") %>% drop_na() %>% head(3)
model %>% filter(word1 == "pound", word2 == "bacon", word3 == "bouquet") %>% drop_na() %>% head(3) %>%nrow()
model %>% filter(word1 == "bacon", word2 == "bouquet") %>% drop_na() %>% head(3)
model %>% filter(word1 == "bouquet") %>% drop_na() %>% head(3)
RandomUnigram(unimodel, k = 3)
nrow(unimodel)
seq_len(nrow(unimodel))
sample(seq_len(nrow(unimodel)), size = 3)
sample(seq_len(nrow(unimodel)), size = 3, prob = unimodel$P)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
RandomUnigram(unimodel, k = 0)
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = 1000,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
# coursera quiz predictions
test_strings <- c("The guy in front of me just bought a pound of bacon, a bouquet, and a case of", "You're the reason why I smile everyday. Can you follow me please? It would mean the", "Hey sunshine, can you follow me and make me the", "Very early observations on the Bills game: Offense still struggling but the","Go on a romantic date at the", "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my", "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some", "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little", "Be grateful for the good times and keep the faith during the", "If this isn't the cutest thing you've ever seen, then you must be")
setwd("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing")
library(tidyverse)
library(tidytext)
library(tm)
library(ggthemes)
library(openNLP)
library(R.utils)
library(data.table)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
data("stop_words")
# calculating probabilities of 'next word'
sample_1000 <- SampleLoadFiles("data/en_US/", n = 1000, seed = 37)
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
View(model)
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = 10000,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
for (string in test_strings){
print(MatchStringPredict(string,
model,
stem = TRUE,
filter = stop_words))
}
# this has 4-gram, can predict off three words
model <- CallAll("data/en_US/train/",
size = -1L,
sample = FALSE,
seed = 17373,
coverage = 0.90,
filter = stop_words)
gc()
source("C:/Users/JL/Desktop/Study/Coursera/Johns Hopkins Data Science/10 capstone/CapstoneProject_NaturalLanguageProcessing/helper_functions.R")
